# # Example mutations for a simple movie app

# # Create a movie based on user input
# mutation CreateMovie(
#   $title: String!
#   $genre: String!
#   $imageUrl: String!
# ) @auth(level: USER_EMAIL_VERIFIED) {
#   movie_insert(
#     data: {
#       title: $title
#       genre: $genre
#       imageUrl: $imageUrl
#     }
#   )
# }

# # Upsert (update or insert) a user's username based on their auth.uid
# mutation UpsertUser($username: String!) @auth(level: USER) {
#   user_upsert(
#     data: {
#       id_expr: "auth.uid"
#       username: $username
#     }
#   )
# }

# # Add a review for a movie
# mutation AddReview(
#   $movieId: UUID!
#   $rating: Int!
#   $reviewText: String!
# ) @auth(level: USER) {
#   review_upsert(
#     data: {
#       userId_expr: "auth.uid"
#       movieId: $movieId
#       rating: $rating
#       reviewText: $reviewText
#       # reviewDate defaults to today in the schema. No need to set it manually.
#     }
#   )
# }

# # Logged in user can delete their review for a movie
# mutation DeleteReview(
#   $movieId: UUID!
# ) @auth(level: USER) {
#   review_delete(key: { userId_expr: "auth.uid", movieId: $movieId })
# }

mutation AddArticle (
    $id: UUID!
    $title: String!
    $date: Timestamp!
    $authors: [String!]
    $source: String!
    $link: String!
) @auth(level: NO_ACCESS) {
    article_insert(
        data: {
            id: $id
            title: $title
            date: $date
            authors: $authors
            source: $source
            link: $link
        }
    )
}

mutation UpsertArticle (
    $id: UUID!
    $title: String!
    $date: Timestamp!
    $authors: [String!]
    $source: String!
    $link: String!
) @auth(level: NO_ACCESS) {
    article_upsert(
        data: {
            id: $id
            title: $title
            date: $date
            authors: $authors
            source: $source
            link: $link
        }
    )
}


mutation DeleteArticle ($id: UUID!)  @auth(level: NO_ACCESS) {
    article_delete(id: $id)
}

# mutation UpdateArticle (
#     $id: UUID!
#     $title: String?
#     $date: Timestamp?
#     $authors: [String]?
#     $source: String?
#     $link: String?   
# )  @auth(level: NO_ACCESS) {
#     article_update(
#         id: $id
#         data: {
#             title: $title
#             date: $date
#             authors: $authors
#             source: $source
#             link: $link
#         }
#     )
# }

mutation AddArticleAnalysis
(
    $articleId: UUID!
    #article: Article! @ref,
    $summary: String,
    $people: [String!],
    $places: [String!],
    $agencies: [String!],
    $laws: [String!],
    $climate: [String!],
    $tags: [String!],
) @auth(level: NO_ACCESS) {
    articleAnalysis_insert(
        data: {
            articleId: $articleId
            people: $people
            places: $places
            agencies: $agencies
            laws: $laws
            climate: $climate
            tags: $tags
        }
    )
}

mutation DeleteArticleAnalysis($key: ArticleAnalysis_Key)  @auth(level: NO_ACCESS) {
    articleAnalysis_delete(key: $key)
}
